generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  manager
  technician
}

enum ContractStatus {
  active
  expired
  cancelled
  pending
}

enum WarrantyStatus {
  valid
  expired
  voided
}

enum TicketPriority {
  low
  medium
  high
  urgent
}

enum TicketStatus {
  open
  in_progress
  resolved
  closed
}

enum ActionType {
  created
  updated
  status_changed
  assigned
  priority_changed
  resolved
  closed
  reopened
}

enum NotificationType {
  warning
  info
  error
  success
}

model User {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String   @unique @db.VarChar(255)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  fullName     String   @map("full_name") @db.VarChar(100)
  role         UserRole @default(technician)
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  createdContracts Contract[]       @relation("ContractCreator")
  assignedTickets  Ticket[]         @relation("TicketAssignee")
  ticketHistory    TicketHistory[]  @relation("TicketHistoryPerformer")
  warrantyHistory  WarrantyHistory[]
  notifications    Notification[]

  @@index([email])
  @@index([role])
  @@index([isActive])
  @@map("users")
}

model Contract {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  contractNumber   String         @unique @map("contract_number") @db.VarChar(50)
  customerId       String?        @map("customer_id") @db.Uuid
  customerName     String         @map("customer_name") @db.VarChar(100)
  customerEmail    String?        @map("customer_email") @db.VarChar(255)
  customerPhone    String?        @map("customer_phone") @db.VarChar(20)
  customerAddress  String?        @map("customer_address")
  startDate        DateTime       @map("start_date") @db.Date
  endDate          DateTime       @map("end_date") @db.Date
  termsConditions  String?        @map("terms_conditions")
  status           ContractStatus @default(active)
  createdBy        String?        @map("created_by") @db.Uuid
  createdAt        DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  creator          User?              @relation("ContractCreator", fields: [createdBy], references: [id])
  contractProducts ContractProduct[]
  productSerials   ProductSerial[]

  @@index([contractNumber])
  @@index([customerEmail])
  @@index([status])
  @@index([startDate, endDate])
  @@map("contracts")
}

model ProductSerial {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  serialNumber    String          @unique @map("serial_number") @db.VarChar(100)
  name            String          @db.VarChar(200)
  model           String          @db.VarChar(100)
  category        String?         @db.VarChar(50)
  description     String?
  warrantyMonths  Int             @default(12) @map("warranty_months")
  contractId      String?         @map("contract_id") @db.Uuid
  manufactureDate DateTime?       @map("manufacture_date") @db.Date
  purchaseDate    DateTime?       @map("purchase_date") @db.Date
  warrantyStatus  WarrantyStatus  @default(valid) @map("warranty_status")
  isActive        Boolean         @default(true) @map("is_active")
  notes           String?
  createdAt       DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  contract         Contract?         @relation(fields: [contractId], references: [id], onDelete: Cascade)
  contractProducts ContractProduct[]
  tickets          Ticket[]
  warrantyHistory  WarrantyHistory[]

  @@index([serialNumber])
  @@index([name])
  @@index([model])
  @@index([category])
  @@index([contractId])
  @@index([warrantyStatus])
  @@map("product_serials")
}

model ContractProduct {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  contractId      String        @map("contract_id") @db.Uuid
  productSerialId String        @map("product_serial_id") @db.Uuid
  quantity        Int
  unitPrice       Decimal       @map("unit_price") @db.Decimal(10, 2)
  notes           String?

  contract      Contract      @relation(fields: [contractId], references: [id], onDelete: Cascade)
  productSerial ProductSerial @relation(fields: [productSerialId], references: [id], onDelete: Cascade)

  @@map("contract_products")
}

model Ticket {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ticketNumber     String         @unique @map("ticket_number") @db.VarChar(50)
  productSerialId  String         @map("product_serial_id") @db.Uuid
  customerName     String         @map("customer_name") @db.VarChar(100)
  customerEmail    String?        @map("customer_email") @db.VarChar(255)
  customerPhone    String?        @map("customer_phone") @db.VarChar(20)
  issueDescription String         @map("issue_description")
  issueTitle       String?        @map("issue_title") @db.VarChar(200)
  priority         TicketPriority @default(medium)
  status           TicketStatus   @default(open)
  assignedTo       String?        @map("assigned_to") @db.Uuid
  createdAt        DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  resolvedAt       DateTime?      @map("resolved_at") @db.Timestamptz(6)

  productSerial ProductSerial   @relation(fields: [productSerialId], references: [id], onDelete: Cascade)
  assignee      User?           @relation("TicketAssignee", fields: [assignedTo], references: [id])
  history       TicketHistory[]

  @@index([ticketNumber])
  @@index([productSerialId])
  @@index([status])
  @@index([priority])
  @@index([assignedTo])
  @@map("tickets")
}

model TicketHistory {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ticketId    String     @map("ticket_id") @db.Uuid
  actionType  ActionType @map("action_type")
  description String
  oldValue    String?    @map("old_value")
  newValue    String?    @map("new_value")
  performedBy String?    @map("performed_by") @db.Uuid
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)

  ticket    Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  performer User?  @relation("TicketHistoryPerformer", fields: [performedBy], references: [id])

  @@index([ticketId])
  @@index([actionType])
  @@index([createdAt])
  @@map("ticket_history")
}

model WarrantyHistory {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productSerialId String        @map("product_serial_id") @db.Uuid
  actionType      ActionType    @map("action_type")
  description     String
  cost            Decimal?      @db.Decimal(10, 2)
  performedBy     String        @map("performed_by") @db.Uuid
  performedAt     DateTime      @default(now()) @map("performed_at") @db.Timestamptz(6)

  productSerial ProductSerial @relation(fields: [productSerialId], references: [id], onDelete: Cascade)
  performer     User          @relation(fields: [performedBy], references: [id], onDelete: Cascade)

  @@map("warranty_history")
}

model Notification {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type      NotificationType
  title     String           @db.VarChar(200)
  message   String
  userId    String?          @map("user_id") @db.Uuid
  read      Boolean          @default(false)
  createdAt DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@index([createdAt])
  @@map("notifications")
}
