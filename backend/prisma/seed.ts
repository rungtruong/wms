import { PrismaClient } from '@prisma/client';
import * as bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Starting database seeding...');

  // Hash password for users
  const hashedPassword = await bcrypt.hash('password123', 10);

  // Create users
  console.log('Creating users...');
  const users = await Promise.all([
    prisma.user.create({
      data: {
        email: 'admin@wms.com',
        passwordHash: hashedPassword,
        fullName: 'Admin User',
        role: 'admin',
        isActive: true,
      },
    }),
    prisma.user.create({
      data: {
        email: 'manager@wms.com',
        passwordHash: hashedPassword,
        fullName: 'Manager User',
        role: 'manager',
        isActive: true,
      },
    }),
    prisma.user.create({
      data: {
        email: 'tech@wms.com',
        passwordHash: hashedPassword,
        fullName: 'Technician User',
        role: 'technician',
        isActive: true,
      },
    }),
  ]);

  console.log(`Created ${users.length} users`);

  // Create contracts
  console.log('Creating contracts...');
  const contracts = await Promise.all([
    prisma.contract.create({
      data: {
        contractNumber: 'WMS-2024-001',
        customerName: 'C√¥ng ty TNHH ABC',
        customerEmail: 'contact@abc.com',
        customerPhone: '0123456789',
        customerAddress: '123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM',
        startDate: new Date('2024-01-01'),
        endDate: new Date('2025-12-31'),
        termsConditions: 'B·∫£o h√†nh 24 th√°ng cho t·∫•t c·∫£ s·∫£n ph·∫©m',
        status: 'active',
        createdBy: users[0].id,
      },
    }),
    prisma.contract.create({
      data: {
        contractNumber: 'WMS-2024-002',
        customerName: 'C√¥ng ty XYZ',
        customerEmail: 'info@xyz.com',
        customerPhone: '0987654321',
        customerAddress: '456 ƒê∆∞·ªùng XYZ, Qu·∫≠n 3, TP.HCM',
        startDate: new Date('2024-02-01'),
        endDate: new Date('2025-01-31'),
        termsConditions: 'B·∫£o h√†nh 12 th√°ng cho s·∫£n ph·∫©m ƒëi·ªán t·ª≠',
        status: 'active',
        createdBy: users[1].id,
      },
    }),
    prisma.contract.create({
      data: {
        contractNumber: 'WMS-2023-015',
        customerName: 'C√¥ng ty DEF',
        customerEmail: 'support@def.com',
        customerPhone: '0369852147',
        customerAddress: '789 ƒê∆∞·ªùng DEF, Qu·∫≠n 7, TP.HCM',
        startDate: new Date('2023-06-01'),
        endDate: new Date('2024-05-31'),
        termsConditions: 'B·∫£o h√†nh 18 th√°ng',
        status: 'expired',
        createdBy: users[0].id,
      },
    }),
  ]);

  console.log(`Created ${contracts.length} contracts`);

  // Create product serials
  console.log('Creating product serials...');
  const productSerials = await Promise.all([
    prisma.productSerial.create({
      data: {
        serialNumber: 'SN001234567890',
        name: 'M√°y in laser HP LaserJet Pro',
        model: 'HP-LJ-P3015',
        category: 'Printer',
        description: 'M√°y in laser ƒëen tr·∫Øng t·ªëc ƒë·ªô cao',
        warrantyMonths: 24,
        contractId: contracts[0].id,
        manufactureDate: new Date('2024-01-15'),
        purchaseDate: new Date('2024-02-01'),
        warrantyStatus: 'valid',
        isActive: true,
        notes: 'S·∫£n ph·∫©m m·ªõi, ch∆∞a s·ª≠ d·ª•ng',
      },
    }),
    prisma.productSerial.create({
      data: {
        serialNumber: 'SN002345678901',
        name: 'Laptop Dell Inspiron 15',
        model: 'DELL-INS-15-3000',
        category: 'Laptop',
        description: 'Laptop vƒÉn ph√≤ng c·∫•u h√¨nh c∆° b·∫£n',
        warrantyMonths: 12,
        contractId: contracts[1].id,
        manufactureDate: new Date('2024-01-20'),
        purchaseDate: new Date('2024-02-15'),
        warrantyStatus: 'valid',
        isActive: true,
        notes: 'ƒê√£ c√†i ƒë·∫∑t ph·∫ßn m·ªÅm c∆° b·∫£n',
      },
    }),
    prisma.productSerial.create({
      data: {
        serialNumber: 'SN003456789012',
        name: 'M√°y photocopy Canon IR2525',
        model: 'CANON-IR-2525',
        category: 'Copier',
        description: 'M√°y photocopy ƒëa ch·ª©c nƒÉng',
        warrantyMonths: 18,
        contractId: contracts[0].id,
        manufactureDate: new Date('2023-12-10'),
        purchaseDate: new Date('2024-01-05'),
        warrantyStatus: 'valid',
        isActive: true,
        notes: 'ƒê√£ b·∫£o tr√¨ ƒë·ªãnh k·ª≥',
      },
    }),
    prisma.productSerial.create({
      data: {
        serialNumber: 'SN004567890123',
        name: 'M√°y t√≠nh ƒë·ªÉ b√†n HP EliteDesk',
        model: 'HP-ED-800-G5',
        category: 'Desktop',
        description: 'M√°y t√≠nh ƒë·ªÉ b√†n hi·ªáu nƒÉng cao',
        warrantyMonths: 12,
        contractId: contracts[2].id,
        manufactureDate: new Date('2023-05-15'),
        purchaseDate: new Date('2023-06-01'),
        warrantyStatus: 'expired',
        isActive: true,
        notes: 'H·∫øt b·∫£o h√†nh, c·∫ßn gia h·∫°n',
      },
    }),
    prisma.productSerial.create({
      data: {
        serialNumber: 'DL15-2024-001234',
        name: 'M√°y in Dell Laser 1234',
        model: 'DL15-2024',
        category: 'Printer',
        description: 'M√°y in laser Dell hi·ªáu nƒÉng cao',
        warrantyMonths: 24,
        contractId: contracts[0].id,
        manufactureDate: new Date('2024-01-10'),
        purchaseDate: new Date('2024-01-25'),
        warrantyStatus: 'valid',
        isActive: true,
        notes: 'S·∫£n ph·∫©m m·ªõi, ƒëang trong th·ªùi gian b·∫£o h√†nh',
      },
    }),
  ]);

  console.log(`Created ${productSerials.length} product serials`);

  // Create tickets
  console.log('Creating tickets...');
  const tickets = await Promise.all([
    prisma.ticket.create({
      data: {
        ticketNumber: 'TK-2024-001',
        productSerialId: productSerials[0].id,
        customerName: 'Nguy·ªÖn VƒÉn A',
        customerEmail: 'nguyenvana@abc.com',
        customerPhone: '0123456789',
        issueDescription: 'M√°y in kh√¥ng nh·∫≠n gi·∫•y, b√°o l·ªói paper jam',
        issueTitle: 'L·ªói k·∫πt gi·∫•y m√°y in',
        priority: 'medium',
        status: 'received',
        assignedTo: users[2].id,
      },
    }),
    prisma.ticket.create({
      data: {
        ticketNumber: 'TK-2024-002',
        productSerialId: productSerials[1].id,
        customerName: 'Tr·∫ßn Th·ªã B',
        customerEmail: 'tranthib@xyz.com',
        customerPhone: '0987654321',
        issueDescription: 'Laptop kh√¥ng kh·ªüi ƒë·ªông ƒë∆∞·ª£c, m√†n h√¨nh ƒëen',
        issueTitle: 'Laptop kh√¥ng kh·ªüi ƒë·ªông',
        priority: 'high',
        status: 'in_progress',
        assignedTo: users[2].id,
      },
    }),
    prisma.ticket.create({
      data: {
        ticketNumber: 'TK-2024-003',
        productSerialId: productSerials[2].id,
        customerName: 'L√™ VƒÉn C',
        customerEmail: 'levanc@abc.com',
        customerPhone: '0369852147',
        issueDescription: 'M√°y photocopy in m·ªù, c·∫ßn thay m·ª±c',
        issueTitle: 'M√°y photocopy in m·ªù',
        priority: 'low',
        status: 'resolved',
        assignedTo: users[2].id,
        resolvedAt: new Date('2024-12-15T10:30:00Z'),
      },
    }),
  ]);

  console.log(`Created ${tickets.length} tickets`);

  // Create ticket history
  console.log('Creating ticket history...');
  await Promise.all([
    prisma.ticketHistory.create({
      data: {
        ticketId: tickets[0].id,
        performedBy: users[2].id,
        actionType: 'updated',
        description: 'ƒê√£ ki·ªÉm tra m√°y in, ph√°t hi·ªán gi·∫•y b·ªã k·∫πt trong khay s·ªë 2',
        oldValue: null,
        newValue: null,
      },
    }),
    prisma.ticketHistory.create({
      data: {
        ticketId: tickets[1].id,
        performedBy: users[2].id,
        actionType: 'status_changed',
        description: 'Chuy·ªÉn tr·∫°ng th√°i t·ª´ received sang in_progress',
        oldValue: 'received',
        newValue: 'in_progress',
      },
    }),
    prisma.ticketHistory.create({
      data: {
        ticketId: tickets[2].id,
        performedBy: users[2].id,
        actionType: 'status_changed',
        description: 'ƒê√£ thay m·ª±c m·ªõi v√† v·ªá sinh m√°y, ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng',
        oldValue: 'in_progress',
        newValue: 'resolved',
      },
    }),
  ]);

  console.log('Created ticket history');

  // Create warranty history
  console.log('Creating warranty history...');
  await Promise.all([
    prisma.warrantyHistory.create({
      data: {
        productSerialId: productSerials[0].id,
        actionType: 'created',
        description: 'S·∫£n ph·∫©m ƒë∆∞·ª£c ƒë∆∞a v√†o b·∫£o h√†nh',
        performedBy: users[0].id,
        performedAt: new Date('2024-02-01T09:00:00Z'),
      },
    }),
    prisma.warrantyHistory.create({
      data: {
        productSerialId: productSerials[2].id,
        actionType: 'updated',
        description: 'Thay th·∫ø b·ªô ph·∫≠n drum unit',
        cost: 1500000,
        performedBy: users[2].id,
        performedAt: new Date('2024-12-15T14:30:00Z'),
      },
    }),
    prisma.warrantyHistory.create({
      data: {
        productSerialId: productSerials[3].id,
        actionType: 'status_changed',
        description: 'H·∫øt h·∫°n b·∫£o h√†nh',
        performedBy: users[1].id,
        performedAt: new Date('2024-06-01T00:00:00Z'),
      },
    }),
  ]);

  console.log('Created warranty history');

  // Create notifications
  console.log('Creating notifications...');
  await Promise.all([
    prisma.notification.create({
      data: {
        type: 'warning',
        title: 'S·∫£n ph·∫©m s·∫Øp h·∫øt b·∫£o h√†nh',
        message: 'M√°y t√≠nh ƒë·ªÉ b√†n HP EliteDesk (SN004567890123) s·∫Ω h·∫øt b·∫£o h√†nh trong 30 ng√†y',
        userId: users[1].id,
        read: false,
      },
    }),
    prisma.notification.create({
      data: {
        type: 'info',
        title: 'Ticket m·ªõi ƒë∆∞·ª£c t·∫°o',
        message: 'Ticket TK-2024-001 ƒë√£ ƒë∆∞·ª£c t·∫°o cho m√°y in HP LaserJet Pro',
        userId: users[2].id,
        read: true,
      },
    }),
    prisma.notification.create({
      data: {
        type: 'success',
        title: 'Ticket ƒë√£ ƒë∆∞·ª£c gi·∫£i quy·∫øt',
        message: 'Ticket TK-2024-003 ƒë√£ ƒë∆∞·ª£c gi·∫£i quy·∫øt th√†nh c√¥ng',
        userId: users[0].id,
        read: false,
      },
    }),
    prisma.notification.create({
      data: {
        type: 'error',
        title: 'L·ªói h·ªá th·ªëng',
        message: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß email',
        userId: users[0].id,
        read: false,
      },
    }),
  ]);

  console.log('Created notifications');

  console.log('‚úÖ Database seeding completed successfully!');
}

main()
  .catch((e) => {
    console.error('‚ùå Error during seeding:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });