import { PrismaClient } from '@prisma/client';
import * as bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

const SEED_PASSWORD = 'password123';
const SALT_ROUNDS = 12;

async function main() {
  console.log('üå± Starting database seeding...');

  const hashedPassword = await bcrypt.hash(SEED_PASSWORD, SALT_ROUNDS);

  console.log('Creating users...');
  const users = await Promise.all([
    prisma.user.create({
      data: {
        email: 'admin@wms.com',
        passwordHash: hashedPassword,
        fullName: 'Forest Tr∆∞∆°ng',
        role: 'admin',
        isActive: true,
      },
    }),
    prisma.user.create({
      data: {
        email: 'manager@wms.com',
        passwordHash: hashedPassword,
        fullName: 'ƒê·ªó Qu·ªëc V∆∞∆°ng',
        role: 'manager',
        isActive: true,
      },
    }),
    prisma.user.create({
      data: {
        email: 'tech1@wms.com',
        passwordHash: hashedPassword,
        fullName: 'Nguy·ªÖn L√Ω Duy Quang',
        role: 'technician',
        isActive: true,
      },
    }),
    prisma.user.create({
      data: {
        email: 'tech2@wms.com',
        passwordHash: hashedPassword,
        fullName: 'Nguy·ªÖn Tr·∫ßn H·∫£i V∆∞∆°ng',
        role: 'technician',
        isActive: true,
      },
    }),
  ]);

  console.log(`Created ${users.length} users`);

  console.log('Creating contracts...');
  const contracts = await Promise.all([
    prisma.contract.create({
      data: {
        contractNumber: 'HD-2024-001',
        customerName: 'C√¥ng ty TNHH C√¥ng ngh·ªá Viettel',
        customerEmail: 'procurement@viettel.com.vn',
        customerPhone: '024-3555-0000',
        customerAddress: '285 C√°ch M·∫°ng Th√°ng 8, Qu·∫≠n 10, TP.HCM',
        startDate: new Date('2024-01-15'),
        endDate: new Date('2026-01-14'),
        termsConditions: 'B·∫£o h√†nh to√†n di·ªán 24 th√°ng, h·ªó tr·ª£ k·ªπ thu·∫≠t 24/7, thay th·∫ø mi·ªÖn ph√≠ trong 30 ng√†y ƒë·∫ßu',
        status: 'active',
        createdBy: users[0].id,
      },
    }),
    prisma.contract.create({
      data: {
        contractNumber: 'HD-2024-002',
        customerName: 'Ng√¢n h√†ng TMCP Techcombank',
        customerEmail: 'it.support@techcombank.com.vn',
        customerPhone: '1900-588-822',
        customerAddress: '191 B√† Tri·ªáu, Hai B√† Tr∆∞ng, H√† N·ªôi',
        startDate: new Date('2024-03-01'),
        endDate: new Date('2025-02-28'),
        termsConditions: 'B·∫£o h√†nh 12 th√°ng, b·∫£o tr√¨ ƒë·ªãnh k·ª≥ h√†ng qu√Ω, h·ªó tr·ª£ onsite trong 4 gi·ªù',
        status: 'active',
        createdBy: users[1].id,
      },
    }),
    prisma.contract.create({
      data: {
        contractNumber: 'HD-2023-045',
        customerName: 'T·∫≠p ƒëo√†n FPT',
        customerEmail: 'vendor@fpt.com.vn',
        customerPhone: '024-7300-8866',
        customerAddress: '17 Duy T√¢n, C·∫ßu Gi·∫•y, H√† N·ªôi',
        startDate: new Date('2023-06-01'),
        endDate: new Date('2024-05-31'),
        termsConditions: 'B·∫£o h√†nh 18 th√°ng, ƒë√†o t·∫°o s·ª≠ d·ª•ng mi·ªÖn ph√≠',
        status: 'expired',
        createdBy: users[0].id,
      },
    }),
    prisma.contract.create({
      data: {
        contractNumber: 'HD-2024-003',
        customerName: 'C√¥ng ty CP ƒê·∫ßu t∆∞ Vingroup',
        customerEmail: 'it.procurement@vingroup.net',
        customerPhone: '024-3974-9999',
        customerAddress: '7 B·∫±ng LƒÉng 1, Vinhomes Riverside, Long Bi√™n, H√† N·ªôi',
        startDate: new Date('2024-04-01'),
        endDate: new Date('2025-03-31'),
        termsConditions: 'B·∫£o h√†nh 24 th√°ng, h·ªó tr·ª£ k·ªπ thu·∫≠t ∆∞u ti√™n, thay th·∫ø nhanh trong 24h',
        status: 'active',
        createdBy: users[1].id,
      },
    }),
  ]);

  console.log(`Created ${contracts.length} contracts`);

  console.log('Creating product serials...');
  const productSerials = await Promise.all([
    prisma.productSerial.create({
      data: {
        serialNumber: 'HP4015N240115001',
        name: 'HP LaserJet Pro 4015n',
        model: 'HP-4015N',
        category: 'Printer',
        description: 'M√°y in laser A4 ƒëen tr·∫Øng, t·ªëc ƒë·ªô 38 trang/ph√∫t, k·∫øt n·ªëi m·∫°ng',
        warrantyMonths: 24,
        contractId: contracts[0].id,
        manufactureDate: new Date('2024-01-15'),
        purchaseDate: new Date('2024-02-01'),
        warrantyStatus: 'valid',
        isActive: true,
        notes: 'Tri·ªÉn khai t·∫°i t·∫ßng 5, ph√≤ng IT',
      },
    }),
    prisma.productSerial.create({
      data: {
        serialNumber: 'DL7520240220001',
        name: 'Dell Latitude 7520',
        model: 'DL-7520',
        category: 'Laptop',
        description: 'Laptop doanh nghi·ªáp Intel Core i7-1165G7, 16GB RAM, 512GB SSD',
        warrantyMonths: 12,
        contractId: contracts[1].id,
        manufactureDate: new Date('2024-02-10'),
        purchaseDate: new Date('2024-02-20'),
        warrantyStatus: 'valid',
        isActive: true,
        notes: 'C·∫•p ph√°t cho nh√¢n vi√™n c·∫•p cao',
      },
    }),
    prisma.productSerial.create({
      data: {
        serialNumber: 'CN2630I240105001',
        name: 'Canon imageRUNNER 2630i',
        model: 'CN-IR2630I',
        category: 'Copier',
        description: 'M√°y photocopy ƒëa ch·ª©c nƒÉng A3, in/copy/scan/fax, t·ªëc ƒë·ªô 30 trang/ph√∫t',
        warrantyMonths: 18,
        contractId: contracts[0].id,
        manufactureDate: new Date('2023-12-20'),
        purchaseDate: new Date('2024-01-05'),
        warrantyStatus: 'valid',
        isActive: true,
        notes: 'ƒê·∫∑t t·∫°i khu v·ª±c ti·∫øp t√¢n t·∫ßng 1',
      },
    }),
    prisma.productSerial.create({
      data: {
        serialNumber: 'HP800G9230601001',
        name: 'HP EliteDesk 800 G9',
        model: 'HP-800G9',
        category: 'Desktop',
        description: 'M√°y t√≠nh ƒë·ªÉ b√†n Intel Core i5-12500, 8GB RAM, 256GB SSD',
        warrantyMonths: 12,
        contractId: contracts[2].id,
        manufactureDate: new Date('2023-05-15'),
        purchaseDate: new Date('2023-06-01'),
        warrantyStatus: 'expired',
        isActive: true,
        notes: 'H·∫øt b·∫£o h√†nh, ƒë·ªÅ xu·∫•t gia h·∫°n ho·∫∑c thay th·∫ø',
      },
    }),
    prisma.productSerial.create({
      data: {
        serialNumber: 'LN14G3240125001',
        name: 'Lenovo ThinkPad T14 Gen 3',
        model: 'LN-T14G3',
        category: 'Laptop',
        description: 'Laptop doanh nghi·ªáp AMD Ryzen 7 PRO, 16GB RAM, 1TB SSD',
        warrantyMonths: 24,
        contractId: contracts[0].id,
        manufactureDate: new Date('2024-01-10'),
        purchaseDate: new Date('2024-01-25'),
        warrantyStatus: 'valid',
        isActive: true,
        notes: 'Laptop cao c·∫•p cho ban l√£nh ƒë·∫°o',
      },
    }),
    prisma.productSerial.create({
      data: {
        serialNumber: 'SW2960X240401001',
        name: 'Cisco Catalyst 2960-X',
        model: 'WS-C2960X-24TS-L',
        category: 'Network',
        description: 'Switch m·∫°ng 24 port Gigabit Ethernet v·ªõi 4 port SFP+',
        warrantyMonths: 24,
        contractId: contracts[3].id,
        manufactureDate: new Date('2024-03-15'),
        purchaseDate: new Date('2024-04-01'),
        warrantyStatus: 'valid',
        isActive: true,
        notes: 'Tri·ªÉn khai t·∫°i data center ch√≠nh',
      },
    }),
    prisma.productSerial.create({
      data: {
        serialNumber: 'SV2U240301001',
        name: 'Dell PowerEdge R750',
        model: 'DL-R750',
        category: 'Server',
        description: 'Server 2U Intel Xeon Silver 4314, 32GB RAM, 2x 1TB SSD RAID1',
        warrantyMonths: 36,
        contractId: contracts[1].id,
        manufactureDate: new Date('2024-02-28'),
        purchaseDate: new Date('2024-03-15'),
        warrantyStatus: 'valid',
        isActive: true,
        notes: 'Server ·∫£o h√≥a ch√≠nh cho h·ªá th·ªëng core banking',
      },
    }),
  ]);

  console.log(`Created ${productSerials.length} product serials`);

  console.log('Creating tickets...');
  const tickets = await Promise.all([
    prisma.ticket.create({
      data: {
        ticketNumber: 'TK-2024-001',
        productSerialId: productSerials[0].id,
        customerName: 'Nguy·ªÖn Minh ƒê·ª©c',
        customerEmail: 'duc.nguyen@viettel.com.vn',
        customerPhone: '024-3555-1234',
        issueDescription: 'M√°y in HP LaserJet Pro 4015n b√°o l·ªói "Toner Low" v√† in ch·∫•t l∆∞·ª£ng k√©m, c√≥ v·ªát m·ªù. ƒê√£ th·ª≠ reset nh∆∞ng v·∫´n kh√¥ng kh·∫Øc ph·ª•c ƒë∆∞·ª£c.',
        issueTitle: 'L·ªói toner v√† ch·∫•t l∆∞·ª£ng in k√©m',
        priority: 'medium',
        status: 'received',
        assignedTo: users[2].id,
      },
    }),
    prisma.ticket.create({
      data: {
        ticketNumber: 'TK-2024-002',
        productSerialId: productSerials[1].id,
        customerName: 'Ph·∫°m Th·ªã Lan Anh',
        customerEmail: 'lananh.pham@techcombank.com.vn',
        customerPhone: '1900-588-999',
        issueDescription: 'Laptop Dell Latitude 7520 kh√¥ng kh·ªüi ƒë·ªông ƒë∆∞·ª£c sau khi c·∫≠p nh·∫≠t Windows. M√†n h√¨nh hi·ªÉn th·ªã "Boot Device Not Found". C·∫ßn h·ªó tr·ª£ kh·∫©n c·∫•p.',
        issueTitle: 'Laptop kh√¥ng boot sau update Windows',
        priority: 'high',
        status: 'in_progress',
        assignedTo: users[2].id,
      },
    }),
    prisma.ticket.create({
      data: {
        ticketNumber: 'TK-2024-003',
        productSerialId: productSerials[2].id,
        customerName: 'L√™ VƒÉn H√πng',
        customerEmail: 'hung.le@viettel.com.vn',
        customerPhone: '024-3555-5678',
        issueDescription: 'M√°y photocopy Canon imageRUNNER 2630i in v√† copy b·ªã m·ªù, c√≥ v·ªát ƒëen d·ªçc theo trang. ƒê√£ v·ªá sinh drum nh∆∞ng v·∫´n kh√¥ng c·∫£i thi·ªán.',
        issueTitle: 'Ch·∫•t l∆∞·ª£ng in/copy k√©m - c√≥ v·ªát ƒëen',
        priority: 'low',
        status: 'resolved',
        assignedTo: users[3].id,
        resolvedAt: new Date('2024-12-15T14:30:00Z'),
      },
    }),
    prisma.ticket.create({
      data: {
        ticketNumber: 'TK-2024-004',
        productSerialId: productSerials[6].id,
        customerName: 'Tr·∫ßn Qu·ªëc Vi·ªát',
        customerEmail: 'viet.tran@techcombank.com.vn',
        customerPhone: '1900-588-777',
        issueDescription: 'Server Dell PowerEdge R750 b√°o c·∫£nh b√°o "Memory Error" v√† hi·ªáu su·∫•t gi·∫£m ƒë√°ng k·ªÉ. Log system hi·ªÉn th·ªã l·ªói ECC memory. C·∫ßn ki·ªÉm tra v√† thay th·∫ø RAM.',
        issueTitle: 'Server b√°o l·ªói memory - c·∫ßn thay RAM',
        priority: 'high',
        status: 'in_progress',
        assignedTo: users[2].id,
      },
    }),
    prisma.ticket.create({
      data: {
        ticketNumber: 'TK-2024-005',
        productSerialId: productSerials[5].id,
        customerName: 'Ho√†ng Th·ªã Mai',
        customerEmail: 'mai.hoang@vingroup.net',
        customerPhone: '024-3974-8888',
        issueDescription: 'Switch Cisco Catalyst 2960-X m·∫•t k·∫øt n·ªëi ng·∫´u nhi√™n ·ªü port 12-16. LED port nh·∫•p nh√°y b·∫•t th∆∞·ªùng. ·∫¢nh h∆∞·ªüng ƒë·∫øn k·∫øt n·ªëi m·∫°ng c·ªßa 5 m√°y tr·∫°m.',
        issueTitle: 'Switch m·∫•t k·∫øt n·ªëi port 12-16',
        priority: 'medium',
        status: 'received',
        assignedTo: users[3].id,
      },
    }),
  ]);

  console.log(`Created ${tickets.length} tickets`);

  console.log('Creating ticket history...');
  await Promise.all([
    prisma.ticketHistory.create({
      data: {
        ticketId: tickets[0].id,
        performedBy: users[2].id,
        actionType: 'updated',
        description: 'ƒê√£ ki·ªÉm tra m√°y in HP LaserJet Pro 4015n. X√°c nh·∫≠n toner c√≤n 15%, ch·∫•t l∆∞·ª£ng in gi·∫£m do drum unit b·ªã m√≤n.',
        oldValue: null,
        newValue: null,
      },
    }),
    prisma.ticketHistory.create({
      data: {
        ticketId: tickets[1].id,
        performedBy: users[2].id,
        actionType: 'status_changed',
        description: 'Ti·∫øp nh·∫≠n ticket kh·∫©n c·∫•p, chuy·ªÉn sang x·ª≠ l√Ω ngay l·∫≠p t·ª©c',
        oldValue: 'received',
        newValue: 'in_progress',
      },
    }),
    prisma.ticketHistory.create({
      data: {
        ticketId: tickets[1].id,
        performedBy: users[2].id,
        actionType: 'updated',
        description: 'ƒê√£ ki·ªÉm tra laptop Dell Latitude 7520. Ph√°t hi·ªán SSD b·ªã l·ªói sau update Windows. ƒêang backup d·ªØ li·ªáu v√† chu·∫©n b·ªã thay th·∫ø SSD.',
        oldValue: null,
        newValue: null,
      },
    }),
    prisma.ticketHistory.create({
      data: {
        ticketId: tickets[2].id,
        performedBy: users[3].id,
        actionType: 'status_changed',
        description: 'ƒê√£ thay th·∫ø drum unit v√† cleaning blade cho m√°y Canon imageRUNNER 2630i. Test in th·ª≠ nghi·ªám OK.',
        oldValue: 'in_progress',
        newValue: 'resolved',
      },
    }),
    prisma.ticketHistory.create({
      data: {
        ticketId: tickets[3].id,
        performedBy: users[2].id,
        actionType: 'updated',
        description: 'ƒê√£ ch·∫°y memory diagnostic tr√™n server Dell PowerEdge R750. X√°c nh·∫≠n RAM slot 4 b·ªã l·ªói ECC. ƒê·∫∑t h√†ng RAM thay th·∫ø.',
        oldValue: null,
        newValue: null,
      },
    }),
    prisma.ticketHistory.create({
      data: {
        ticketId: tickets[4].id,
        performedBy: users[3].id,
        actionType: 'updated',
        description: 'ƒê√£ ki·ªÉm tra switch Cisco Catalyst 2960-X. Ph√°t hi·ªán port 12-16 c√≥ d·∫•u hi·ªáu h·ªèng module. C·∫ßn thay th·∫ø line card.',
        oldValue: null,
        newValue: null,
      },
    }),
  ]);

  console.log('Created ticket history');

  console.log('Creating warranty history...');
  await Promise.all([
    prisma.warrantyHistory.create({
      data: {
        productSerialId: productSerials[0].id,
        actionType: 'created',
        description: 'Y√™u c·∫ßu b·∫£o h√†nh m√°y in HP LaserJet Pro 4015n do drum unit b·ªã m√≤n tr∆∞·ªõc th·ªùi h·∫°n. ƒê√£ g·ª≠i ·∫£nh ch·ª•p ch·∫•t l∆∞·ª£ng in k√©m v√† log l·ªói t·ª´ m√°y.',
        performedBy: users[2].id,
        cost: 2500000,
      },
    }),
    prisma.warrantyHistory.create({
      data: {
        productSerialId: productSerials[1].id,
        actionType: 'updated',
        description: 'Gia h·∫°n b·∫£o h√†nh laptop Dell Latitude 7520 th√™m 24 th√°ng theo g√≥i Dell ProSupport Plus. Bao g·ªìm onsite service v√† accidental damage protection.',
        performedBy: users[1].id,
        cost: 8500000,
      },
    }),
    prisma.warrantyHistory.create({
      data: {
        productSerialId: productSerials[2].id,
        actionType: 'updated',
        description: 'Thay th·∫ø fuser unit v√† transfer belt cho m√°y Canon imageRUNNER 2630i theo warranty. L·ªói E000020-0001 xu·∫•t hi·ªán li√™n t·ª•c.',
        performedBy: users[2].id,
        cost: 4200000,
      },
    }),
    prisma.warrantyHistory.create({
      data: {
        productSerialId: productSerials[3].id,
        actionType: 'created',
        description: 'Y√™u c·∫ßu b·∫£o h√†nh desktop HP EliteDesk 800 G9 do motherboard b·ªã l·ªói. M√°y kh√¥ng boot ƒë∆∞·ª£c, ƒë√®n LED b√°o l·ªói memory.',
        performedBy: users[3].id,
        cost: 6800000,
      },
    }),
    prisma.warrantyHistory.create({
      data: {
        productSerialId: productSerials[4].id,
        actionType: 'updated',
        description: 'Thay th·∫ø power supply v√† cooling fan cho switch Cisco Catalyst 2960-X. Nhi·ªát ƒë·ªô v·∫≠n h√†nh v∆∞·ª£t ng∆∞·ª°ng an to√†n.',
        performedBy: users[2].id,
        cost: 3200000,
      },
    }),
    prisma.warrantyHistory.create({
      data: {
        productSerialId: productSerials[5].id,
        actionType: 'updated',
        description: 'Gia h·∫°n b·∫£o h√†nh server Dell PowerEdge R750 theo g√≥i Dell ProSupport Mission Critical. Bao g·ªìm 4-hour onsite response.',
        performedBy: users[1].id,
        cost: 15000000,
      },
    }),
  ]);

  console.log('Created warranty history');

  console.log('Creating notifications...');
  await Promise.all([
    prisma.notification.create({
      data: {
        type: 'warning',
        title: 'B·∫£o h√†nh s·∫Øp h·∫øt h·∫°n - HP LaserJet Pro 4015n',
        message: 'Thi·∫øt b·ªã HP LaserJet Pro 4015n (S/N: HP4015N240115001) thu·ªôc h·ª£p ƒë·ªìng HD-2024-001 s·∫Ω h·∫øt h·∫°n b·∫£o h√†nh v√†o ng√†y 15/01/2026. Vui l√≤ng li√™n h·ªá kh√°ch h√†ng ƒë·ªÉ gia h·∫°n.',
        userId: users[1].id,
        read: false,
      },
    }),
    prisma.notification.create({
      data: {
        type: 'info',
        title: 'Ticket kh·∫©n c·∫•p m·ªõi - Dell Latitude 7520',
        message: 'Ticket #TK-2024-002 (ƒê·ªô ∆∞u ti√™n: Cao) ƒë√£ ƒë∆∞·ª£c t·∫°o cho laptop Dell Latitude 7520. Kh√°ch h√†ng b√°o c√°o kh√¥ng boot ƒë∆∞·ª£c sau update Windows. C·∫ßn x·ª≠ l√Ω ngay.',
        userId: users[2].id,
        read: true,
      },
    }),
    prisma.notification.create({
      data: {
        type: 'success',
        title: 'Ho√†n th√†nh b·∫£o h√†nh - Canon imageRUNNER 2630i',
        message: 'Ticket #TK-2024-003 ƒë√£ ƒë∆∞·ª£c gi·∫£i quy·∫øt th√†nh c√¥ng. ƒê√£ thay th·∫ø drum unit v√† cleaning blade cho m√°y Canon imageRUNNER 2630i. Kh√°ch h√†ng x√°c nh·∫≠n m√°y ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.',
        userId: users[0].id,
        read: false,
      },
    }),
    prisma.notification.create({
      data: {
        type: 'error',
        title: 'L·ªói g·ª≠i email th√¥ng b√°o',
        message: 'Kh√¥ng th·ªÉ g·ª≠i email th√¥ng b√°o ho√†n th√†nh ticket #TK-2024-003 ƒë·∫øn kh√°ch h√†ng hung.le@viettel.com.vn. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh SMTP server.',
        userId: users[0].id,
        read: false,
      },
    }),
    prisma.notification.create({
      data: {
        type: 'warning',
        title: 'Server c·∫ßn b·∫£o tr√¨ kh·∫©n c·∫•p',
        message: 'Server Dell PowerEdge R750 (S/N: SV2U240301001) b√°o l·ªói RAM ECC t·∫°i slot 4. C·∫ßn thay th·∫ø RAM ngay ƒë·ªÉ tr√°nh downtime. ƒê√£ ƒë·∫∑t h√†ng linh ki·ªán thay th·∫ø.',
        userId: users[2].id,
        read: false,
      },
    }),
    prisma.notification.create({
      data: {
        type: 'info',
        title: 'Gia h·∫°n h·ª£p ƒë·ªìng th√†nh c√¥ng',
        message: 'H·ª£p ƒë·ªìng HD-2024-002 v·ªõi Ng√¢n h√†ng TMCP Techcombank ƒë√£ ƒë∆∞·ª£c gia h·∫°n th√™m 12 th√°ng. Bao g·ªìm c√°c thi·∫øt b·ªã v·ªõi t·ªïng gi√° tr·ªã b·∫£o h√†nh m·ªü r·ªông.',
        userId: users[1].id,
        read: false,
      },
    }),
  ]);

  console.log('Created notifications');

  console.log('‚úÖ Database seeding completed successfully!');
}

main()
  .catch((e) => {
    console.error('‚ùå Error during seeding:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });