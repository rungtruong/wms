version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: warranty-postgres
    environment:
      POSTGRES_DB: warranty_db
      POSTGRES_USER: warranty_user
      POSTGRES_PASSWORD: warranty_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - warranty-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U warranty_user -d warranty_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: warranty-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - warranty-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API (NestJS)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: warranty-backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://warranty_user:warranty_password@postgres:5432/warranty_db
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      PORT: 3001
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - warranty-network
    restart: unless-stopped

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: warranty-frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:3001
      PORT: 3000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - warranty-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  warranty-network:
    driver: bridge